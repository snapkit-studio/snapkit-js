name: Release Core Package

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even without package changes'
        required: false
        default: false
        type: boolean
      version_bump:
        description: 'Version bump type (auto analyzes commits, others override)'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      dry_run:
        description: 'Dry run (simulate deployment without publishing to NPM)'
        required: false
        default: false
        type: boolean

jobs:
  release:
    name: Release @snapkit-studio/core
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
      packages: write
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for changes (Enhanced with failed deployment tracking)
        id: changes
        run: |
          PACKAGE_NAME="core"
          PACKAGE_PATH="packages/core/"

          echo "🔍 Enhanced change detection for $PACKAGE_NAME package"

          # Find the last successful release tag for this package
          LAST_SUCCESS_TAG=$(git tag -l "core-v*" --sort=-version:refname | head -1)

          if [ -z "$LAST_SUCCESS_TAG" ]; then
            echo "📦 No previous successful release found for $PACKAGE_NAME"
            # For first release, check against parent of current commit
            COMPARE_COMMIT=$(git rev-parse HEAD^)
            echo "🔄 Comparing against parent commit: $COMPARE_COMMIT"
          else
            COMPARE_COMMIT=$(git rev-list -n 1 $LAST_SUCCESS_TAG)
            echo "✅ Last successful release: $LAST_SUCCESS_TAG (commit: $COMPARE_COMMIT)"
          fi

          # Smart deployment logic based on trigger type
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "🚀 Manual deployment triggered via workflow_dispatch"

            # Check force_deploy input
            if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
              echo "💪 Force deployment requested - skipping change checks"
              echo "skip=false" >> $GITHUB_OUTPUT
              echo "skip_reason=force_deploy_requested" >> $GITHUB_OUTPUT

              # Get all commits since last success for versioning
              ALL_COMMITS=$(git rev-list $COMPARE_COMMIT..HEAD --oneline)
              COMMIT_COUNT=$(echo "$ALL_COMMITS" | wc -l | tr -d ' ')
              echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
              echo "changed_commits<<EOF" >> $GITHUB_OUTPUT
              echo "$ALL_COMMITS" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT

            elif git diff --quiet $COMPARE_COMMIT HEAD -- $PACKAGE_PATH; then
              # No package changes, but check if any commits exist since last success
              TOTAL_COMMITS=$(git rev-list --count $COMPARE_COMMIT..HEAD)
              if [ $TOTAL_COMMITS -gt 0 ]; then
                echo "📦 Manual deployment: $TOTAL_COMMITS commits since last success (no package changes)"
                echo "skip=false" >> $GITHUB_OUTPUT
                echo "skip_reason=manual_deployment_with_commits" >> $GITHUB_OUTPUT

                # Get all commits for context
                ALL_COMMITS=$(git rev-list $COMPARE_COMMIT..HEAD --oneline)
                echo "commit_count=$TOTAL_COMMITS" >> $GITHUB_OUTPUT
                echo "changed_commits<<EOF" >> $GITHUB_OUTPUT
                echo "$ALL_COMMITS" >> $GITHUB_OUTPUT
                echo "EOF" >> $GITHUB_OUTPUT
              else
                echo "⏭️ Manual deployment: No commits since last successful release"
                echo "skip=true" >> $GITHUB_OUTPUT
                echo "skip_reason=no_commits_since_last_success" >> $GITHUB_OUTPUT
              fi
            else
              echo "🎯 Manual deployment: Package changes detected since last successful release"
              echo "skip=false" >> $GITHUB_OUTPUT
              echo "skip_reason=package_changes_detected" >> $GITHUB_OUTPUT

              # Get package-specific commits
              CHANGED_COMMITS=$(git rev-list $COMPARE_COMMIT..HEAD --oneline -- $PACKAGE_PATH)
              COMMIT_COUNT=$(echo "$CHANGED_COMMITS" | wc -l | tr -d ' ')
              echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
              echo "changed_commits<<EOF" >> $GITHUB_OUTPUT
              echo "$CHANGED_COMMITS" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            fi
          else
            # Automatic deployment (workflow_run) - original logic
            echo "🤖 Automatic deployment triggered via workflow_run"

            if git diff --quiet $COMPARE_COMMIT HEAD -- $PACKAGE_PATH; then
              echo "⏭️ No changes in $PACKAGE_NAME package since last successful release"
              echo "skip=true" >> $GITHUB_OUTPUT
              echo "skip_reason=no_changes_since_last_success" >> $GITHUB_OUTPUT
            else
              echo "🎯 Changes detected in $PACKAGE_NAME package since last successful release"
              echo "skip=false" >> $GITHUB_OUTPUT
              echo "skip_reason=package_changes_detected" >> $GITHUB_OUTPUT

              # Get list of commits with changes
              CHANGED_COMMITS=$(git rev-list $COMPARE_COMMIT..HEAD --oneline -- $PACKAGE_PATH)
              echo "📝 Commits with changes:"
              echo "$CHANGED_COMMITS"

              # Store commit count for version bump logic
              COMMIT_COUNT=$(echo "$CHANGED_COMMITS" | wc -l | tr -d ' ')
              echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT

              # Store changed commits for Slack notification
              echo "changed_commits<<EOF" >> $GITHUB_OUTPUT
              echo "$CHANGED_COMMITS" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Build package
        if: steps.changes.outputs.skip != 'true'
        run: pnpm exec turbo build --filter @snapkit-studio/core

      - name: Determine next version
        if: steps.changes.outputs.skip != 'true'
        id: version
        run: |
          cd packages/core

          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Check if manual version override is requested
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.version_bump }}" != "auto" ]; then
            echo "🎯 Manual version override: ${{ github.event.inputs.version_bump }}"
            VERSION_TYPE="${{ github.event.inputs.version_bump }}"

            case $VERSION_TYPE in
              "major")
                NEXT_VERSION=$(node -p "
                  const v = require('./package.json').version.split('.');
                  \`\${parseInt(v[0]) + 1}.0.0\`
                ")
                echo "Manual major version bump: $NEXT_VERSION"
                ;;
              "minor")
                NEXT_VERSION=$(node -p "
                  const v = require('./package.json').version.split('.');
                  \`\${v[0]}.\${parseInt(v[1]) + 1}.0\`
                ")
                echo "Manual minor version bump: $NEXT_VERSION"
                ;;
              "patch")
                NEXT_VERSION=$(node -p "
                  const v = require('./package.json').version.split('.');
                  \`\${v[0]}.\${v[1]}.\${parseInt(v[2]) + 1}\`
                ")
                echo "Manual patch version bump: $NEXT_VERSION"
                ;;
            esac
          else
            # Automatic version determination based on commits
            echo "🤖 Analyzing commits for automatic version determination"

            # Use commits from change detection (either package-specific or all commits)
            COMMITS="${{ steps.changes.outputs.changed_commits }}"
            if [ -z "$COMMITS" ]; then
              # Fallback to recent commits
              COMMITS=$(git log --oneline -10 -- packages/core/)
            fi

            echo "Analyzing commits:"
            echo "$COMMITS"

            # Determine version bump based on commit messages
            if echo "$COMMITS" | grep -q "BREAKING CHANGE\|feat!\|fix!\|chore!"; then
              # Major version bump
              NEXT_VERSION=$(node -p "
                const v = require('./package.json').version.split('.');
                \`\${parseInt(v[0]) + 1}.0.0\`
              ")
              echo "Major version bump detected (BREAKING CHANGE)"
            elif echo "$COMMITS" | grep -q "feat(\|feat:"; then
              # Minor version bump
              NEXT_VERSION=$(node -p "
                const v = require('./package.json').version.split('.');
                \`\${v[0]}.\${parseInt(v[1]) + 1}.0\`
              ")
              echo "Minor version bump detected (feat)"
            elif echo "$COMMITS" | grep -q "fix(\|fix:\|perf(\|perf:"; then
              # Patch version bump
              NEXT_VERSION=$(node -p "
                const v = require('./package.json').version.split('.');
                \`\${v[0]}.\${v[1]}.\${parseInt(v[2]) + 1}\`
              ")
              echo "Patch version bump detected (fix/perf)"
            else
              # Default to patch bump for any other changes
              NEXT_VERSION=$(node -p "
                const v = require('./package.json').version.split('.');
                \`\${v[0]}.\${v[1]}.\${parseInt(v[2]) + 1}\`
              ")
              echo "Default patch version bump (other changes)"
            fi
          fi

          echo "Next version: $NEXT_VERSION"
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "tag=core-v$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Update package version
        if: steps.changes.outputs.skip != 'true' && steps.version.outputs.skip != 'true'
        run: |
          cd packages/core
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version

          # Update root package.json if needed
          cd ../..
          git add packages/core/package.json

      - name: Check if version already exists on NPM
        if: steps.changes.outputs.skip != 'true' && steps.version.outputs.skip != 'true'
        id: npm_check
        run: |
          if npm view "@snapkit-studio/core@${{ steps.version.outputs.version }}" version &>/dev/null; then
            echo "Version ${{ steps.version.outputs.version }} already exists on NPM"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version ${{ steps.version.outputs.version }} does not exist on NPM"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.changes.outputs.skip != 'true' && steps.version.outputs.skip != 'true' && steps.npm_check.outputs.exists != 'true' && github.event.inputs.dry_run != 'true'
        run: |
          cd packages/core
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Dry Run Summary
        if: github.event.inputs.dry_run == 'true' && steps.changes.outputs.skip != 'true' && steps.version.outputs.skip != 'true'
        run: |
          echo "🎭 DRY RUN SUMMARY"
          echo "=================="
          echo "Package: @snapkit-studio/core"
          echo "Current version: $(cd packages/core && node -p "require('./package.json').version")"
          echo "Next version: ${{ steps.version.outputs.version }}"
          echo "Tag: ${{ steps.version.outputs.tag }}"
          echo "Skip reason: ${{ steps.changes.outputs.skip_reason }}"
          echo "Commit count: ${{ steps.changes.outputs.commit_count }}"
          echo ""
          echo "Actions that WOULD be performed:"
          echo "- Update package.json version to ${{ steps.version.outputs.version }}"
          echo "- Publish @snapkit-studio/core@${{ steps.version.outputs.version }} to NPM"
          echo "- Create git tag: ${{ steps.version.outputs.tag }}"
          echo "- Create GitHub release"
          echo "- Send Slack notification"
          echo ""
          echo "⚠️  This was a DRY RUN - no actual changes were made"

      - name: Create git tag and commit
        if: steps.changes.outputs.skip != 'true' && steps.version.outputs.skip != 'true' && steps.npm_check.outputs.exists != 'true' && github.event.inputs.dry_run != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git commit -m "chore(core): release v${{ steps.version.outputs.version }} [skip ci]"
          git tag "${{ steps.version.outputs.tag }}" -m "Release @snapkit-studio/core@${{ steps.version.outputs.version }}"

          # Push with retry logic to handle concurrent releases
          for i in {1..5}; do
            echo "Attempt $i to push changes..."

            # Pull latest changes first
            if git pull --rebase origin main; then
              echo "Successfully pulled latest changes"
            else
              echo "Pull failed, continuing with push attempt..."
            fi

            # Try to push
            if git push origin main && git push origin "${{ steps.version.outputs.tag }}"; then
              echo "Successfully pushed changes and tag"
              break
            else
              echo "Push failed, waiting 10 seconds before retry..."
              sleep 10

              if [ $i -eq 5 ]; then
                echo "Failed to push after 5 attempts"
                exit 1
              fi
            fi
          done

      - name: Create GitHub Release
        if: steps.changes.outputs.skip != 'true' && steps.version.outputs.skip != 'true' && steps.npm_check.outputs.exists != 'true' && github.event.inputs.dry_run != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: "@snapkit-studio/core v${{ steps.version.outputs.version }}"
          body: |
            ## @snapkit-studio/core v${{ steps.version.outputs.version }}

            ### Changes
            - Published to NPM: https://www.npmjs.com/package/@snapkit-studio/core/v/${{ steps.version.outputs.version }}

            ### Installation
            ```bash
            npm install @snapkit-studio/core@${{ steps.version.outputs.version }}
            ```
          draft: false
          prerelease: false

      # Slack Notifications
      - name: Notify Slack - Success
        if: steps.changes.outputs.skip != 'true' && steps.version.outputs.skip != 'true' && steps.npm_check.outputs.exists != 'true' && github.event.inputs.dry_run != 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: webhook-trigger
          payload: |
            {
              "text": "✅ @snapkit-studio/core v${{ steps.version.outputs.version }} deployment successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ *@snapkit-studio/core v${{ steps.version.outputs.version }} deployment was successful*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Package:*\n@snapkit-studio/core"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Version:*\nv${{ steps.version.outputs.version }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${GITHUB_SHA:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Changed commits:*\n${{ steps.changes.outputs.commit_count || 1 }} commits"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Changed commits list:*\n```${{ steps.changes.outputs.changed_commits }}```"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "📦 View on NPM"
                      },
                      "url": "https://www.npmjs.com/package/@snapkit-studio/core/v/${{ steps.version.outputs.version }}",
                      "style": "primary"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "🔍 View Action Logs"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }

      - name: Notify Slack - Skipped
        if: steps.changes.outputs.skip == 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: webhook-trigger
          payload: |
            {
              "text": "⏭️ @snapkit-studio/core deployment skipped",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "⏭️ *@snapkit-studio/core package deployment was skipped*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Package:*\n@snapkit-studio/core"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Skip reason:*\nNo changes since last successful deployment"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${GITHUB_SHA:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow:*\n${{ github.event_name }}"
                    }
                  ]
                }
              ]
            }

      - name: Notify Slack - Dry Run
        if: github.event.inputs.dry_run == 'true' && steps.changes.outputs.skip != 'true' && steps.version.outputs.skip != 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: webhook-trigger
          payload: |
            {
              "text": "🎭 @snapkit-studio/core v${{ steps.version.outputs.version }} dry run completed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🎭 *@snapkit-studio/core v${{ steps.version.outputs.version }} dry run completed*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Package:*\n@snapkit-studio/core"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Would-be version:*\nv${{ steps.version.outputs.version }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Trigger:*\nManual deployment (dry run)"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commits analyzed:*\n${{ steps.changes.outputs.commit_count || 1 }} commits"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*⚠️ This was a simulation - no actual changes were made*"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "🔍 View Dry Run Logs"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }

      - name: Notify Slack - Failed
        if: failure() && github.event.inputs.dry_run != 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: webhook-trigger
          payload: |
            {
              "text": "❌ @snapkit-studio/core deployment failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🚨 *@snapkit-studio/core package deployment failed*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Package:*\n@snapkit-studio/core"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Failed at:*\n${{ github.event.head_commit.timestamp }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${GITHUB_SHA:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*🔍 Troubleshooting:*\n- Check GitHub Actions logs for detailed error information\n- Verify package dependencies and build configuration\n- Confirm NPM token and permissions"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "🔍 View Failed Action Logs"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "style": "danger"
                    }
                  ]
                }
              ]
            }