name: Test Canary Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Canary version to test'
        required: true
        type: string
      tag:
        description: 'Release tag'
        required: true
        type: string
  workflow_run:
    workflows: ["Release Canary"]
    types:
      - completed

permissions:
  contents: read
  actions: write

jobs:
  test-canary:
    name: Test Canary Version
    runs-on: ubuntu-latest
    outputs:
      test_passed: ${{ steps.test_result.outputs.passed }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Canary Version Info
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
            TAG="${{ inputs.tag }}"
          else
            # Get latest pre-release from GitHub
            RELEASE_INFO=$(gh api repos/${{ github.repository }}/releases | jq -r 'map(select(.prerelease == true)) | .[0]')
            TAG=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
            VERSION=${TAG#v}  # Remove 'v' prefix
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "üì¶ Testing canary version: ${VERSION}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Test Environment
        run: |
          # Create test directory
          mkdir -p /tmp/canary-test
          cd /tmp/canary-test

          # Copy test app files
          cp -r ${{ github.workspace }}/test-fixtures/nextjs-external-app/* .

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install and Build Test App
        working-directory: /tmp/canary-test
        run: |
          # Create package.json - install from NPM with exact canary version
          VERSION="${{ steps.version.outputs.version }}"

          cat > package.json << EOF
          {
            "name": "test-canary-app",
            "version": "1.0.0",
            "private": true,
            "scripts": {
              "dev": "next dev",
              "build": "next build",
              "start": "next start",
              "test": "playwright test"
            },
            "dependencies": {
              "next": "^15.0.0",
              "react": "^19.0.0",
              "react-dom": "^19.0.0",
              "@snapkit-studio/core": "${VERSION}",
              "@snapkit-studio/react": "${VERSION}",
              "@snapkit-studio/nextjs": "${VERSION}"
            },
            "devDependencies": {
              "@playwright/test": "^1.40.0",
              "@types/node": "^20",
              "@types/react": "^19",
              "@types/react-dom": "^19",
              "typescript": "^5"
            }
          }
          EOF

          # Show package.json for debugging
          echo "üìã Package.json content:"
          cat package.json

          # Install dependencies from NPM registry
          echo "üì¶ Installing packages from NPM..."
          npm install

          # Verify installed versions
          echo "‚úÖ Installed package versions:"
          npm list @snapkit-studio/core @snapkit-studio/react @snapkit-studio/nextjs

          # Create environment file
          cat > .env.local << EOF
          SNAPKIT_ORGANIZATION_NAME=test-org
          EOF

          # Build the test app
          echo "üî® Building test app..."
          SNAPKIT_ORGANIZATION_NAME=test-org npm run build

      - name: Install Playwright
        working-directory: /tmp/canary-test
        run: npx playwright install chromium

      - name: Run E2E Tests
        id: e2e_test
        working-directory: /tmp/canary-test
        run: |
          # Start the app
          SNAPKIT_ORGANIZATION_NAME=test-org npm run start &
          SERVER_PID=$!

          # Wait for server to be ready
          sleep 10

          # Run tests
          npx playwright test --reporter=json > test-results.json 2>&1 || TEST_FAILED=true

          # Stop server
          kill $SERVER_PID || true

          if [ "$TEST_FAILED" = "true" ]; then
            echo "e2e_passed=false" >> $GITHUB_OUTPUT
            echo "‚ùå E2E tests failed"
            cat test-results.json
            exit 1
          else
            echo "e2e_passed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ E2E tests passed"
          fi

      - name: Run SSR Test
        id: ssr_test
        working-directory: /tmp/canary-test
        run: |
          # Start production server
          SNAPKIT_ORGANIZATION_NAME=test-org npm run start &
          SERVER_PID=$!

          # Wait for server
          sleep 10

          # Test SSR
          curl -s http://localhost:3000/test-server | grep -q "data-testid=\"server-image-basic\"" && SSR_PASSED=true || SSR_PASSED=false

          # Stop server
          kill $SERVER_PID || true

          if [ "$SSR_PASSED" = "true" ]; then
            echo "ssr_passed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ SSR test passed"
          else
            echo "ssr_passed=false" >> $GITHUB_OUTPUT
            echo "‚ùå SSR test failed"
            exit 1
          fi

      - name: Test Summary
        id: test_result
        if: always()
        run: |
          E2E="${{ steps.e2e_test.outputs.e2e_passed }}"
          SSR="${{ steps.ssr_test.outputs.ssr_passed }}"

          if [ "$E2E" = "true" ] && [ "$SSR" = "true" ]; then
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=All tests passed ‚úÖ" >> $GITHUB_OUTPUT
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Some tests failed ‚ùå" >> $GITHUB_OUTPUT
          fi

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: canary-test-results
          path: /tmp/canary-test/test-results.json
          retention-days: 7

  notify-and-promote:
    name: Notify and Promote
    runs-on: ubuntu-latest
    needs: test-canary
    if: always()

    steps:
      - name: Get Version Info
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
            TAG="${{ inputs.tag }}"
          else
            # Get from previous job or latest release
            RELEASE_INFO=$(gh api repos/${{ github.repository }}/releases | jq -r 'map(select(.prerelease == true)) | .[0]')
            TAG=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
            VERSION=${TAG#v}
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Slack Notification - Test Results
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: '${{ needs.test-canary.outputs.test_passed == 'true' && 'good' || 'danger' }}',
                title: '${{ needs.test-canary.outputs.test_passed == 'true' && '‚úÖ Canary Tests Passed' || '‚ùå Canary Tests Failed' }}',
                text: '${{ needs.test-canary.outputs.test_passed == 'true' && 'All canary tests passed successfully. Ready for promotion to stable.' || 'Some canary tests failed. Please review the results.' }}',
                fields: [
                  {
                    title: 'Version',
                    value: '${{ steps.version.outputs.version }}',
                    short: true
                  },
                  {
                    title: 'Tag',
                    value: '${{ steps.version.outputs.tag }}',
                    short: true
                  },
                  {
                    title: 'E2E Tests',
                    value: '${{ needs.test-canary.outputs.test_passed == 'true' && '‚úÖ Passed' || '‚ùå Failed' }}',
                    short: true
                  },
                  {
                    title: 'SSR Tests',
                    value: '${{ needs.test-canary.outputs.test_passed == 'true' && '‚úÖ Passed' || '‚ùå Failed' }}',
                    short: true
                  },
                  {
                    title: 'Action Required',
                    value: '${{ needs.test-canary.outputs.test_passed == 'true' && 'Automatic promotion to stable will begin...' || 'Fix issues and create new canary release' }}',
                    short: false
                  }
                ],
                actions: [
                  {
                    type: 'button',
                    text: 'View Test Results',
                    url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
                  }
                ],
                footer: 'GitHub Actions',
                footer_icon: 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png'
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

      - name: Trigger Promotion to Stable
        if: needs.test-canary.outputs.test_passed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'promote-release.yml',
              ref: 'main',
              inputs: {
                version: '${{ steps.version.outputs.version }}',
                tag: '${{ steps.version.outputs.tag }}'
              }
            });

            console.log('‚úÖ Triggered promotion to stable workflow');