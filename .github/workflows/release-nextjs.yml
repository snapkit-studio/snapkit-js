name: Release Next.js Package

on:
  workflow_run:
    workflows: ["CI", "Release React Package"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:

jobs:
  release:
    name: Release @snapkit-studio/nextjs
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
      packages: write
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success' &&
       (github.event.workflow_run.name == 'CI' || github.event.workflow_run.name == 'Release React Package'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for changes (Enhanced with failed deployment tracking)
        id: changes
        run: |
          PACKAGE_NAME="nextjs"
          PACKAGE_PATH="packages/nextjs/"

          echo "🔍 Enhanced change detection for $PACKAGE_NAME package"

          # Find the last successful release tag for this package
          LAST_SUCCESS_TAG=$(git tag -l "nextjs-v*" --sort=-version:refname | head -1)

          if [ -z "$LAST_SUCCESS_TAG" ]; then
            echo "📦 No previous successful release found for $PACKAGE_NAME"
            # For first release, check against parent of current commit
            COMPARE_COMMIT=$(git rev-parse HEAD^)
            echo "🔄 Comparing against parent commit: $COMPARE_COMMIT"
          else
            COMPARE_COMMIT=$(git rev-list -n 1 $LAST_SUCCESS_TAG)
            echo "✅ Last successful release: $LAST_SUCCESS_TAG (commit: $COMPARE_COMMIT)"
          fi

          # Check for changes since last successful deployment
          if git diff --quiet $COMPARE_COMMIT HEAD -- $PACKAGE_PATH; then
            echo "⏭️ No changes in $PACKAGE_NAME package since last successful release"
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "skip_reason=no_changes_since_last_success" >> $GITHUB_OUTPUT
          else
            echo "🎯 Changes detected in $PACKAGE_NAME package since last successful release"
            echo "skip=false" >> $GITHUB_OUTPUT

            # Get list of commits with changes
            CHANGED_COMMITS=$(git rev-list $COMPARE_COMMIT..HEAD --oneline -- $PACKAGE_PATH)
            echo "📝 Commits with changes:"
            echo "$CHANGED_COMMITS"

            # Store commit count for version bump logic
            COMMIT_COUNT=$(echo "$CHANGED_COMMITS" | wc -l | tr -d ' ')
            echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT

            # Store changed commits for Slack notification
            echo "changed_commits<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGED_COMMITS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      - name: Build package
        if: steps.changes.outputs.skip != 'true'
        run: pnpm exec turbo build --filter @snapkit-studio/nextjs

      - name: Determine next version
        if: steps.changes.outputs.skip != 'true'
        id: version
        run: |
          cd packages/nextjs

          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Get commits since last commit for this package (recent changes only)
          COMMITS=$(git log --oneline -10 -- packages/nextjs/)
          echo "Recent commits affecting nextjs package:"
          echo "$COMMITS"

          # Determine version bump based on commit messages
          if echo "$COMMITS" | grep -q "BREAKING CHANGE\|feat!\|fix!\|chore!"; then
            # Major version bump
            NEXT_VERSION=$(node -p "
              const v = require('./package.json').version.split('.');
              \`\${parseInt(v[0]) + 1}.0.0\`
            ")
            echo "Major version bump detected (BREAKING CHANGE)"
          elif echo "$COMMITS" | grep -q "feat(\|feat:"; then
            # Minor version bump
            NEXT_VERSION=$(node -p "
              const v = require('./package.json').version.split('.');
              \`\${v[0]}.\${parseInt(v[1]) + 1}.0\`
            ")
            echo "Minor version bump detected (feat)"
          elif echo "$COMMITS" | grep -q "fix(\|fix:\|perf(\|perf:"; then
            # Patch version bump
            NEXT_VERSION=$(node -p "
              const v = require('./package.json').version.split('.');
              \`\${v[0]}.\${v[1]}.\${parseInt(v[2]) + 1}\`
            ")
            echo "Patch version bump detected (fix/perf)"
          else
            # Default to patch bump for any other changes
            NEXT_VERSION=$(node -p "
              const v = require('./package.json').version.split('.');
              \`\${v[0]}.\${v[1]}.\${parseInt(v[2]) + 1}\`
            ")
            echo "Default patch version bump (other changes)"
          fi

          echo "Next version: $NEXT_VERSION"
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "tag=nextjs-v$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Update package version
        if: steps.changes.outputs.skip != 'true' && steps.version.outputs.skip != 'true'
        run: |
          cd packages/nextjs
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version

          # Update root package.json if needed
          cd ../..
          git add packages/nextjs/package.json

      - name: Check if version already exists on NPM
        if: steps.changes.outputs.skip != 'true' && steps.version.outputs.skip != 'true'
        id: npm_check
        run: |
          if npm view "@snapkit-studio/nextjs@${{ steps.version.outputs.version }}" version &>/dev/null; then
            echo "Version ${{ steps.version.outputs.version }} already exists on NPM"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version ${{ steps.version.outputs.version }} does not exist on NPM"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        if: steps.changes.outputs.skip != 'true' && steps.version.outputs.skip != 'true' && steps.npm_check.outputs.exists != 'true'
        run: |
          cd packages/nextjs
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create git tag and commit
        if: steps.changes.outputs.skip != 'true' && steps.version.outputs.skip != 'true' && steps.npm_check.outputs.exists != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git commit -m "chore(nextjs): release v${{ steps.version.outputs.version }} [skip ci]"
          git tag "${{ steps.version.outputs.tag }}" -m "Release @snapkit-studio/nextjs@${{ steps.version.outputs.version }}"

          # Push with retry logic to handle concurrent releases
          for i in {1..5}; do
            echo "Attempt $i to push changes..."

            # Pull latest changes first
            if git pull --rebase origin main; then
              echo "Successfully pulled latest changes"
            else
              echo "Pull failed, continuing with push attempt..."
            fi

            # Try to push
            if git push origin main && git push origin "${{ steps.version.outputs.tag }}"; then
              echo "Successfully pushed changes and tag"
              break
            else
              echo "Push failed, waiting 10 seconds before retry..."
              sleep 10

              if [ $i -eq 5 ]; then
                echo "Failed to push after 5 attempts"
                exit 1
              fi
            fi
          done

      - name: Create GitHub Release
        if: steps.changes.outputs.skip != 'true' && steps.version.outputs.skip != 'true' && steps.npm_check.outputs.exists != 'true'
        run: |
          gh release create "${{ steps.version.outputs.tag }}" \
            --title "@snapkit-studio/nextjs v${{ steps.version.outputs.version }}" \
            --notes "## @snapkit-studio/nextjs v${{ steps.version.outputs.version }}

          ### Changes
          - Published to NPM: https://www.npmjs.com/package/@snapkit-studio/nextjs/v/${{ steps.version.outputs.version }}

          ### Installation
          \`\`\`bash
          npm install @snapkit-studio/nextjs@${{ steps.version.outputs.version }}
          \`\`\`"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}