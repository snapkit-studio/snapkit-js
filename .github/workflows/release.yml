name: Release Packages

on:
  workflow_run:
    workflows: ['CI']
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  packages: write
  id-token: write
  pull-requests: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.name == 'CI')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm exec turbo build

      - name: Run tests
        run: pnpm exec turbo test

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Release Pull Request or Update Versions
        id: changesets
        uses: changesets/action@v1
        with:
          version: pnpm changeset:version
          commit: 'chore: release packages'
          title: 'chore: release packages'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare packages for release (clean dependencies)
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |
          echo "üßπ Cleaning dependencies for release..."
          pnpm prepare-release
          echo "‚úÖ Dependencies cleaned successfully"

      - name: Publish to NPM Registry (with dependency order)
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |
          echo "üì¶ Publishing to NPM with Changesets (dependency order guaranteed)..."

          # Configure .npmrc for Changesets to use correct registries
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
          echo "@snapkit-studio:registry=https://registry.npmjs.org/" >> ~/.npmrc

          pnpm changeset:publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Push tags
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |
          echo "üè∑Ô∏è Pushing Git tags created by changesets..."
          git push --follow-tags
          echo "‚úÖ Tags pushed successfully"

      - name: Create GitHub Release
        if: steps.changesets.outputs.hasChangesets == 'false' && steps.changesets.outputs.published == 'true'
        run: |
          echo "üöÄ Creating GitHub Release..."

          # Check if tags exist before proceeding
          if ! git describe --tags --abbrev=0 > /dev/null 2>&1; then
            echo "‚ö†Ô∏è No tags found, skipping GitHub Release creation"
            exit 0
          fi

          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "üìã Latest tag: $LATEST_TAG"

          # Extract version info from publishedPackages
          PUBLISHED_PACKAGES='${{ steps.changesets.outputs.publishedPackages }}'

          # Create release notes
          cat > release_notes.md << EOF
          # üöÄ Release $LATEST_TAG

          ## üì¶ Published Packages

          $(echo "$PUBLISHED_PACKAGES" | jq -r '.[] | "- **\(.name)**: \(.version)"' 2>/dev/null || echo "- Package information not available")

          ## üîß Deployment Status
          - ‚úÖ NPM Registry: All packages published
          - ‚úÖ GitHub Package Registry: Stable releases only
          - ‚úÖ Git Tags: Automatically created and pushed

          All packages are available on [NPM Registry](https://www.npmjs.com/org/snapkit-studio).
          EOF

          # Create GitHub release
          gh release create "$LATEST_TAG" \
            --title "Release $LATEST_TAG" \
            --notes-file release_notes.md \
            --verify-tag || echo "‚ö†Ô∏è Release creation failed, but continuing..."

          echo "‚úÖ GitHub Release created successfully"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js for GitHub Package Registry
        if: steps.changesets.outputs.hasChangesets == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://npm.pkg.github.com'
          scope: '@snapkit-studio'

      - name: Publish to GitHub Package Registry (sequential order)
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |
          echo "üì¶ Publishing to GitHub Package Registry in dependency order..."

          # Configure npm for GitHub registry with proper authentication
          echo "@snapkit-studio:registry=https://npm.pkg.github.com/" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc
          echo "registry=https://npm.pkg.github.com/" >> ~/.npmrc

          # Verify authentication
          npm whoami --registry=https://npm.pkg.github.com || echo "Authentication check failed"

          # Function to check if version is a prerelease
          is_prerelease() {
            local version=$1
            if [[ "$version" =~ -[a-zA-Z] ]]; then
              return 0  # true - is prerelease
            else
              return 1  # false - is stable release
            fi
          }

          # Function to publish package if it's a stable version
          publish_if_stable() {
            local package_name=$1
            local package_dir=$2
            local display_name=$3

            echo "${package_name} Publishing ${display_name} package..."
            cd "$package_dir"

            # Get version from package.json
            local version=$(node -p "require('./package.json').version")
            echo "üìã ${display_name} version: $version"

            if is_prerelease "$version"; then
              echo "‚ö†Ô∏è Skipping ${display_name} - prerelease version detected ($version)"
              echo "‚ÑπÔ∏è GitHub Package Registry only publishes stable releases"
            else
              echo "‚úÖ Publishing ${display_name} - stable version ($version)"
              if npm publish --access=public; then
                echo "‚úÖ ${display_name} published successfully"
              else
                echo "‚ùå ${display_name} failed to publish"
              fi
            fi
            cd ../..
          }

          # Publish in dependency order: core ‚Üí react ‚Üí nextjs (only stable versions)
          publish_if_stable "1Ô∏è‚É£" "packages/core" "Core"
          publish_if_stable "2Ô∏è‚É£" "packages/react" "React"
          publish_if_stable "3Ô∏è‚É£" "packages/nextjs" "NextJS"

          echo "üéâ GitHub Package Registry publishing completed!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Slack notification on success
        if: steps.changesets.outputs.hasChangesets == 'false'
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "channel": "#releases",
              "username": "SnapKit Release Bot",
              "icon_emoji": ":rocket:",
              "attachments": [
                {
                  "color": "good",
                  "title": "üéâ Release Success!",
                  "fields": [
                    {
                      "title": "üì¶ NPM Registry",
                      "value": "${{ steps.changesets.outputs.publishedPackages }}",
                      "short": false
                    },
                    {
                      "title": "üì¶ GitHub Package Registry",
                      "value": "Published successfully",
                      "short": true
                    },
                    {
                      "title": "üë§ Author",
                      "value": "${{ github.actor }}",
                      "short": true
                    }
                  ],
                  "footer": "SnapKit Release System",
                  "footer_icon": "https://github.com/snapkit-studio.png",
                  "ts": "${{ github.event.head_commit.timestamp }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack notification on failure
        if: failure()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "channel": "#releases",
              "username": "SnapKit Release Bot",
              "icon_emoji": ":x:",
              "attachments": [
                {
                  "color": "danger",
                  "title": "‚ùå Release Failed!",
                  "fields": [
                    {
                      "title": "üö´ Workflow",
                      "value": "${{ github.workflow }}",
                      "short": true
                    },
                    {
                      "title": "üë§ Author",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "üîó Action Run",
                      "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>",
                      "short": false
                    },
                    {
                      "title": "üîó Commit",
                      "value": "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>",
                      "short": false
                    }
                  ],
                  "footer": "Please check the workflow logs and fix any issues.",
                  "footer_icon": "https://github.com/snapkit-studio.png",
                  "ts": "${{ github.event.repository.pushed_at }}"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
